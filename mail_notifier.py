import imaplib
import email
from email.header import decode_header
import requests
import os
import json
import logging
from datetime import datetime
import re
import quopri
from email.encoders import decode_qprint

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
YANDEX_EMAIL = os.getenv('YANDEX_EMAIL')
YANDEX_APP_PASSWORD = os.getenv('YANDEX_APP_PASSWORD')
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')
TARGET_SENDER = os.getenv('TARGET_SENDER', 'guard@arbitr.ru')
TARGET_SUBJECT_KEYWORDS = os.getenv('TARGET_SUBJECT_KEYWORDS', '–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –¥–µ–ª–∞').split(',')

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
IMAP_SERVER = 'imap.yandex.ru'
IMAP_PORT = 993
STATE_FILE = 'email_state.json'
REQUEST_TIMEOUT = 30

def log_info(message):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    logger.info(f"üìù {message}")

def log_error(message):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫"""
    logger.error(f"‚ùå {message}")

def log_success(message):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
    logger.info(f"‚úÖ {message}")

def log_warning(message):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π"""
    logger.warning(f"‚ö†Ô∏è {message}")

def load_processed_state():
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –ø–∏—Å—å–º–∞ –∏–∑ —Ñ–∞–π–ª–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    
    Returns:
        str or None: ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –ø–∏—Å—å–º–∞ –∏–ª–∏ None –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    """
    try:
        with open(STATE_FILE, 'r', encoding='utf-8') as f:
            state = json.load(f)
            last_id = state.get('last_processed_id')
            log_info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ID {last_id}")
            return last_id
    except FileNotFoundError:
        log_info("–§–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Å –Ω–∞—á–∞–ª–∞")
        return None
    except json.JSONDecodeError as e:
        log_error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
        return None
    except Exception as e:
        log_error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
        return None

def save_processed_state(email_id):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç ID –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –ø–∏—Å—å–º–∞ –≤ —Ñ–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è
    
    Args:
        email_id (str): ID –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –ø–∏—Å—å–º–∞
    """
    try:
        with open(STATE_FILE, 'w', encoding='utf-8') as f:
            json.dump({'last_processed_id': email_id}, f, ensure_ascii=False, indent=2)
        log_success(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ID {email_id}")
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")

def decode_quoted_printable(text):
    """
    –î–µ–∫–æ–¥–∏—Ä—É–µ—Ç quoted-printable —Å—Ç—Ä–æ–∫–∏
    """
    try:
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º quoted-printable
        decoded_bytes = quopri.decodestring(text.encode('utf-8'))
        decoded_text = decoded_bytes.decode('utf-8', errors='ignore')
        return decoded_text
    except:
        return text

def extract_plain_text_from_html(html_text):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç –∏–∑ HTML, —É–±–∏—Ä–∞—è –≤—Å–µ —Ç–µ–≥–∏
    """
    try:
        # –£–±–∏—Ä–∞–µ–º HTML —Ç–µ–≥–∏
        clean_text = re.sub(r'<[^>]+>', '', html_text)
        # –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã
        clean_text = re.sub(r'\s+', ' ', clean_text)
        # –£–±–∏—Ä–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ HTML —Å–∏–º–≤–æ–ª—ã
        clean_text = re.sub(r'&nbsp;', ' ', clean_text)
        clean_text = re.sub(r'&amp;', '&', clean_text)
        clean_text = re.sub(r'&lt;', '<', clean_text)
        clean_text = re.sub(r'&gt;', '>', clean_text)
        clean_text = re.sub(r'&quot;', '"', clean_text)
        clean_text = clean_text.strip()
        return clean_text
    except:
        return html_text

def clean_telegram_text(text):
    """
    –û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç —Å–∏–º–≤–æ–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–ª–æ–º–∞—Ç—å —Ä–∞–∑–º–µ—Ç–∫—É Telegram
    –∏ –¥–µ–∫–æ–¥–∏—Ä—É–µ—Ç quoted-printable —Å—Ç—Ä–æ–∫–∏
    
    Args:
        text (str): –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
        
    Returns:
        str: –û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    if not text:
        return ""
    
    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º quoted-printable —Å—Ç—Ä–æ–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, =D0=9C=D0=BE=D0=B9)
    cleaned_text = decode_quoted_printable(text)
    
    # –£–±–∏—Ä–∞–µ–º HTML —Ç–µ–≥–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if '<' in cleaned_text and '>' in cleaned_text:
        cleaned_text = extract_plain_text_from_html(cleaned_text)
    
    # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∞–Ω–∞–ª–æ–≥–∏
    replacements = {
        '*': '‚Ä¢',
        '_': '‚Äî',
        '`': "'",
        '[': '(',
        ']': ')',
        '~': '‚âà',
        '#': '‚Ññ',
        '=': '‚ïê',
        '|': '‚îÇ',
        '{': '‚ù¥',
        '}': '‚ùµ',
        '>': '‚Ä∫',
        '<': '‚Äπ',
        '?': 'Ôºü',
        '&': '–∏',
        ';': ',',
        ':': 'Àê',
        '!': '‚ùó'
    }
    
    for old, new in replacements.items():
        cleaned_text = cleaned_text.replace(old, new)
    
    # –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã
    cleaned_text = re.sub(r'\s+', ' ', cleaned_text)
    cleaned_text = cleaned_text.strip()
    
    return cleaned_text

def decode_email_header(header):
    """
    –î–µ–∫–æ–¥–∏—Ä—É–µ—Ç email –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å —É—á–µ—Ç–æ–º –∫–æ–¥–∏—Ä–æ–≤–∫–∏
    """
    if not header:
        return ""
    
    try:
        decoded_parts = decode_header(header)
        decoded_text = ""
        
        for part, encoding in decoded_parts:
            if isinstance(part, bytes):
                if encoding:
                    decoded_text += part.decode(encoding, errors='ignore')
                else:
                    decoded_text += part.decode('utf-8', errors='ignore')
            else:
                decoded_text += str(part)
        
        return clean_telegram_text(decoded_text)
    except Exception as e:
        log_warning(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞: {e}")
        return clean_telegram_text(str(header))

def send_telegram_message(subject, sender, body_preview, email_id):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
    
    Args:
        subject (str): –¢–µ–º–∞ –ø–∏—Å—å–º–∞
        sender (str): –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –ø–∏—Å—å–º–∞
        body_preview (str): –ü—Ä–µview —Ç–µ–∫—Å—Ç–∞ –ø–∏—Å—å–º–∞
        email_id (str): ID –ø–∏—Å—å–º–∞
        
    Returns:
        bool: True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    log_info("–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram...")
    
    try:
        # –û—á–∏—â–∞–µ–º –∏ –¥–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        subject_clean = decode_email_header(subject)
        sender_clean = decode_email_header(sender)
        body_clean = clean_telegram_text(body_preview)
        
        # –û–±—Ä–µ–∑–∞–µ–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        if len(body_clean) > 150:
            body_clean = body_clean[:147] + "..."
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = (
            f"‚öñÔ∏è –ù–û–í–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –û–¢ –ê–†–ë–ò–¢–†–ê–ñ–ù–û–ì–û –°–£–î–ê\n\n"
            f"üì© –û–¢: {sender_clean}\n"
            f"üìã –¢–ï–ú–ê: {subject_clean}\n"
            f"üîî –°–¢–ê–¢–£–°: –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –¥–µ–ª–∞\n"
            f"üìñ –û–¢–†–´–í–û–ö: {body_clean}\n\n"
            f"üìß ID –ü–ò–°–¨–ú–ê: {email_id}\n"
            f"üïí –í–†–ï–ú–Ø: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        )
        
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
        payload = {
            'chat_id': TELEGRAM_CHAT_ID,
            'text': message
            # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º parse_mode –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å —Ä–∞–∑–º–µ—Ç–∫–æ–π
        }
        
        response = requests.post(url, json=payload, timeout=REQUEST_TIMEOUT)
        log_info(f"–°—Ç–∞—Ç—É—Å Telegram: {response.status_code}")
        
        if response.status_code == 200:
            log_success("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram!")
            return True
        else:
            log_error(f"–û—à–∏–±–∫–∞ Telegram: {response.status_code} - {response.text}")
            return False
            
    except requests.exceptions.Timeout:
        log_error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram")
        return False
    except requests.exceptions.ConnectionError:
        log_error("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram")
        return False
    except Exception as e:
        log_error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")
        return False

def extract_email_body(msg):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Ç–µ–ª–æ –∏–∑ email —Å–æ–æ–±—â–µ–Ω–∏—è, —É–±–∏—Ä–∞—è HTML —Ç–µ–≥–∏
    
    Args:
        msg: Email —Å–æ–æ–±—â–µ–Ω–∏–µ
        
    Returns:
        str: –¢–µ–∫—Å—Ç –ø–∏—Å—å–º–∞ –±–µ–∑ HTML —Ä–∞–∑–º–µ—Ç–∫–∏
    """
    body = ""
    
    try:
        if msg.is_multipart():
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º multipart —Å–æ–æ–±—â–µ–Ω–∏–µ
            for part in msg.walk():
                content_type = part.get_content_type()
                content_disposition = str(part.get('Content-Disposition', ''))
                
                # –ò—â–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é —á–∞—Å—Ç—å –±–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–π
                if content_type == 'text/plain' and 'attachment' not in content_disposition:
                    try:
                        body_bytes = part.get_payload(decode=True)
                        if body_bytes:
                            body = body_bytes.decode('utf-8', errors='ignore')
                            break
                    except Exception as e:
                        log_warning(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —á–∞—Å—Ç–∏ –ø–∏—Å—å–º–∞: {e}")
                        continue
                
                # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º HTML –Ω–æ —É–±–∏—Ä–∞–µ–º —Ç–µ–≥–∏
                if content_type == 'text/html' and not body and 'attachment' not in content_disposition:
                    try:
                        body_bytes = part.get_payload(decode=True)
                        if body_bytes:
                            html_body = body_bytes.decode('utf-8', errors='ignore')
                            # –£–±–∏—Ä–∞–µ–º HTML —Ç–µ–≥–∏ –∏ –ø–æ–ª—É—á–∞–µ–º —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç
                            body = extract_plain_text_from_html(html_body)
                            break
                    except Exception as e:
                        log_warning(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è HTML —á–∞—Å—Ç–∏: {e}")
                        continue
        else:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                body_bytes = msg.get_payload(decode=True)
                if body_bytes:
                    body_content = body_bytes.decode('utf-8', errors='ignore')
                    # –ï—Å–ª–∏ —ç—Ç–æ HTML, —É–±–∏—Ä–∞–µ–º —Ç–µ–≥–∏
                    if msg.get_content_type() == 'text/html':
                        body = extract_plain_text_from_html(body_content)
                    else:
                        body = body_content
            except Exception as e:
                log_warning(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∏—Å—å–º–∞: {e}")
        
        # –ï—Å–ª–∏ —Ç–µ–ª–æ –ø—É—Å—Ç–æ–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        if not body:
            body = "–¢–µ–∫—Å—Ç –ø–∏—Å—å–º–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —á—Ç–µ–Ω–∏—è"
            
        return body.strip()
        
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–ª–∞ –ø–∏—Å—å–º–∞: {e}")
        return "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–∏—Å—å–º–∞"

def check_email_criteria(subject, sender):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–∏—Å—å–º–æ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏—è–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    
    Args:
        subject (str): –¢–µ–º–∞ –ø–∏—Å—å–º–∞
        sender (str): –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –ø–∏—Å—å–º–∞
        
    Returns:
        bool: True –µ—Å–ª–∏ –ø–∏—Å—å–º–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ –∫—Ä–∏—Ç–µ—Ä–∏–∏
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    is_target_sender = TARGET_SENDER.lower() in sender.lower()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–º—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    is_target_subject = any(
        keyword.lower() in subject.lower() 
        for keyword in TARGET_SUBJECT_KEYWORDS 
        if keyword.strip()
    )
    
    log_info(f"–ö—Ä–∏—Ç–µ—Ä–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏: –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å={is_target_sender}, —Ç–µ–º–∞={is_target_subject}")
    return is_target_sender and is_target_subject

def process_email_message(mail, email_id, last_processed_id):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω–æ email —Å–æ–æ–±—â–µ–Ω–∏–µ
    
    Args:
        mail: IMAP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        email_id: ID –ø–∏—Å—å–º–∞
        last_processed_id: ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –ø–∏—Å—å–º–∞
        
    Returns:
        tuple: (new_last_processed_id, notification_sent)
    """
    email_id_str = email_id.decode()
    log_info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∏—Å—å–º–∞ ID: {email_id_str}")
    
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞
    if last_processed_id and int(email_id_str) <= int(last_processed_id):
        log_info("–ü–∏—Å—å–º–æ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return last_processed_id, False
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–∏—Å—å–º–æ
    try:
        status, msg_data = mail.fetch(email_id, '(RFC822)')
        if status != 'OK':
            log_error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∏—Å—å–º–∞")
            return last_processed_id, False
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∏—Å—å–º–∞: {e}")
        return last_processed_id, False
    
    # –ü–∞—Ä—Å–∏–º –ø–∏—Å—å–º–æ
    try:
        msg = email.message_from_bytes(msg_data[0][1])
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–∏—Å—å–º–∞: {e}")
        return last_processed_id, False
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–º—É
    subject = msg.get('Subject', '–ë–µ–∑ —Ç–µ–º—ã')
    subject = decode_email_header(subject)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    sender = msg.get('From', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å')
    sender = decode_email_header(sender)
    
    log_info(f"–¢–µ–º–∞: {subject}")
    log_info(f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {sender}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏
    if not check_email_criteria(subject, sender):
        log_info("–ü–∏—Å—å–º–æ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ –∫—Ä–∏—Ç–µ—Ä–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
        return last_processed_id, False
    
    log_success("–ü–∏—Å—å–º–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ –∫—Ä–∏—Ç–µ—Ä–∏–∏! –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º...")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞
    body = extract_email_body(msg)
    log_info(f"–î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ –ø–∏—Å—å–º–∞: {len(body)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
    notification_sent = False
    if send_telegram_message(subject, sender, body, email_id_str):
        notification_sent = True
        log_success("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
    else:
        log_error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    
    # –ü–æ–º–µ—á–∞–µ–º –ø–∏—Å—å–º–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
    try:
        mail.store(email_id, '+FLAGS', '\\Seen')
        log_info("–ü–∏—Å—å–º–æ –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ")
    except Exception as e:
        log_warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–º–µ—Ç–∫–µ –ø–∏—Å—å–º–∞ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ: {e}")
    
    return email_id_str, notification_sent

def check_email():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—á—Ç—ã
    """
    log_info("–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ—á—Ç—ã...")
    log_info(f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    mail = None
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –Ø–Ω–¥–µ–∫—Å.–ü–æ—á—Ç—ã
        log_info("–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –Ø–Ω–¥–µ–∫—Å.–ü–æ—á—Ç–µ...")
        mail = imaplib.IMAP4_SSL(IMAP_SERVER, IMAP_PORT)
        mail.login(YANDEX_EMAIL, YANDEX_APP_PASSWORD)
        mail.select('inbox')
        log_success("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –Ø–Ω–¥–µ–∫—Å.–ü–æ—á—Ç–µ")
        
        # –ò—â–µ–º –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞
        log_info("–ü–æ–∏—Å–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º...")
        status, messages = mail.search(None, 'UNSEEN')
        
        if status != 'OK':
            log_info("–ù–µ—Ç –Ω–æ–≤—ã—Ö –ø–∏—Å–µ–º")
            return
        
        email_ids = messages[0].split()
        
        if not email_ids:
            log_info("–ù–µ—Ç –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º")
            return
        
        log_info(f"–ù–∞–π–¥–µ–Ω–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º: {len(email_ids)}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        last_processed_id = load_processed_state()
        new_last_processed_id = last_processed_id
        notifications_sent = 0
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∏—Å—å–º–∞
        for email_id in email_ids:
            new_id, sent = process_email_message(mail, email_id, last_processed_id)
            if new_id != last_processed_id:
                new_last_processed_id = new_id
            if sent:
                notifications_sent += 1
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –±—ã–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –Ω–æ–≤—ã–µ –ø–∏—Å—å–º–∞
        if new_last_processed_id != last_processed_id:
            save_processed_state(new_last_processed_id)
        else:
            log_info("–°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å")
        
        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
        log_success(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {notifications_sent}")
        log_info(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ID {new_last_processed_id}")
        
    except imaplib.IMAP4.error as e:
        log_error(f"–û—à–∏–±–∫–∞ IMAP: {e}")
    except Exception as e:
        log_error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        if mail:
            try:
                mail.close()
                mail.logout()
                log_info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ø–æ—á—Ç–æ–π –∑–∞–∫—Ä—ã—Ç–æ")
            except Exception as e:
                log_warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")

def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    """
    print("=" * 50)
    print("üéØ YANDEX MAIL TO TELEGRAM NOTIFIER")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    required_vars = {
        'YANDEX_EMAIL': YANDEX_EMAIL,
        'YANDEX_APP_PASSWORD': YANDEX_APP_PASSWORD,
        'TELEGRAM_BOT_TOKEN': TELEGRAM_BOT_TOKEN,
        'TELEGRAM_CHAT_ID': TELEGRAM_CHAT_ID
    }
    
    missing_vars = [var for var, value in required_vars.items() if not value]
    if missing_vars:
        log_error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing_vars)}")
        return
    
    log_info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    log_info(f"–¶–µ–ª–µ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {TARGET_SENDER}")
    log_info(f"–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ —Ç–µ–º–µ: {TARGET_SUBJECT_KEYWORDS}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ—á—Ç—ã
    check_email()
    
    print("=" * 50)
    log_success("–†–∞–±–æ—Ç–∞ —Å–∫—Ä–∏–ø—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    print("=" * 50)

if __name__ == '__main__':
    main()
