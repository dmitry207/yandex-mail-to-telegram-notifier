import imaplib
import email
from email.header import decode_header
import requests
import os
import json

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
YANDEX_EMAIL = os.getenv('YANDEX_EMAIL')
YANDEX_APP_PASSWORD = os.getenv('YANDEX_APP_PASSWORD')
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')
TARGET_SENDER = os.getenv('TARGET_SENDER', 'guard@arbitr.ru')
TARGET_SUBJECT_KEYWORDS = os.getenv('TARGET_SUBJECT_KEYWORDS', '–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –¥–µ–ª–∞').split(',')

STATE_FILE = 'email_state.json'

def load_processed_state():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –ø–∏—Å—å–º–∞"""
    try:
        with open(STATE_FILE, 'r') as f:
            state = json.load(f)
            print(f"üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ID {state.get('last_processed_id')}")
            return state.get('last_processed_id', None)
    except FileNotFoundError:
        print("üìÅ –§–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Å –Ω–∞—á–∞–ª–∞")
        return None

def save_processed_state(email_id):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç ID –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –ø–∏—Å—å–º–∞"""
    with open(STATE_FILE, 'w') as f:
        json.dump({'last_processed_id': email_id}, f)
    print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ID {email_id}")

def send_telegram_message(subject, sender, body_preview, email_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
    print("üü° –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram...")
    
    message = f"‚öñÔ∏è **–ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–≥–æ —Å—É–¥–∞**\n\n" \
              f"üì© **–û—Ç:** {sender}\n" \
              f"üìã **–¢–µ–º–∞:** {subject}\n" \
              f"üîî **–°—Ç–∞—Ç—É—Å:** –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –¥–µ–ª–∞\n" \
              f"üìñ **–û—Ç—Ä—ã–≤–æ–∫:** {body_preview[:150]}...\n\n" \
              f"üìß **ID –ø–∏—Å—å–º–∞:** {email_id}"
    
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {
        'chat_id': TELEGRAM_CHAT_ID,
        'text': message,
        'parse_mode': 'Markdown'
    }
    
    try:
        response = requests.post(url, json=payload, timeout=30)
        print(f"üì° –°—Ç–∞—Ç—É—Å Telegram: {response.status_code}")
        
        if response.status_code == 200:
            print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram!")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ Telegram: {response.status_code} - {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
        return False

def check_email():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—á—Ç—ã"""
    print("üîç –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ—á—Ç—ã...")
    print(f"üïí –í—Ä–µ–º—è: {email.utils.formatdate()}")
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –Ø–Ω–¥–µ–∫—Å.–ü–æ—á—Ç—ã
        print("üîê –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –Ø–Ω–¥–µ–∫—Å.–ü–æ—á—Ç–µ...")
        mail = imaplib.IMAP4_SSL('imap.yandex.ru', 993)
        mail.login(YANDEX_EMAIL, YANDEX_APP_PASSWORD)
        mail.select('inbox')
        print("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –Ø–Ω–¥–µ–∫—Å.–ü–æ—á—Ç–µ")
        
        # –ò—â–µ–º –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞
        print("üîé –ü–æ–∏—Å–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º...")
        status, messages = mail.search(None, 'UNSEEN')
        
        if status != 'OK':
            print("‚ÑπÔ∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö –ø–∏—Å–µ–º")
            return
        
        email_ids = messages[0].split()
        
        if not email_ids:
            print("‚ÑπÔ∏è –ù–µ—Ç –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º")
            return
        
        print(f"üì® –ù–∞–π–¥–µ–Ω–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º: {len(email_ids)}")
        
        last_processed_id = load_processed_state()
        new_last_processed_id = last_processed_id
        notifications_sent = 0
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∏—Å—å–º–∞ –≤ –ø–æ—Ä—è–¥–∫–µ –æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º
        for email_id in email_ids:
            email_id_str = email_id.decode()
            print(f"\n--- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∏—Å—å–º–∞ ID: {email_id_str} ---")
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∏—Å—å–º–∞, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏—Å—å
            if last_processed_id and int(email_id_str) <= int(last_processed_id):
                print("‚Ü™Ô∏è –ü–∏—Å—å–º–æ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                continue
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–∏—Å—å–º–æ
            status, msg_data = mail.fetch(email_id, '(RFC822)')
            if status != 'OK':
                print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∏—Å—å–º–∞")
                continue
            
            # –ü–∞—Ä—Å–∏–º –ø–∏—Å—å–º–æ
            msg = email.message_from_bytes(msg_data[0][1])
            
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–µ–º—É
            subject = "–ë–µ–∑ —Ç–µ–º—ã"
            if msg['Subject']:
                subject_raw, encoding = decode_header(msg['Subject'])[0]
                if isinstance(subject_raw, bytes):
                    subject = subject_raw.decode(encoding if encoding else 'utf-8')
                else:
                    subject = subject_raw
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            sender = msg.get('From', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å')
            
            print(f"üìß –¢–µ–º–∞: {subject}")
            print(f"üì© –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {sender}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            is_target_sender = TARGET_SENDER in sender
            is_target_subject = any(keyword.lower() in subject.lower() for keyword in TARGET_SUBJECT_KEYWORDS)
            
            print(f"üîç –ö—Ä–∏—Ç–µ—Ä–∏–∏: –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å={is_target_sender}, —Ç–µ–º–∞={is_target_subject}")
            
            if is_target_sender and is_target_subject:
                print("üéØ –ü–∏—Å—å–º–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ –∫—Ä–∏—Ç–µ—Ä–∏–∏! –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º...")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞
                body = ""
                if msg.is_multipart():
                    for part in msg.walk():
                        content_type = part.get_content_type()
                        content_disposition = str(part.get('Content-Disposition'))
                        
                        if content_type == 'text/plain' and 'attachment' not in content_disposition:
                            try:
                                body_bytes = part.get_payload(decode=True)
                                if body_bytes:
                                    body = body_bytes.decode('utf-8', errors='ignore')
                                break
                            except Exception as e:
                                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–ª–∞ –ø–∏—Å—å–º–∞: {e}")
                                body = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞"
                else:
                    try:
                        body_bytes = msg.get_payload(decode=True)
                        if body_bytes:
                            body = body_bytes.decode('utf-8', errors='ignore')
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–ª–∞ –ø–∏—Å—å–º–∞: {e}")
                        body = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞"
                
                print(f"üìù –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ –ø–∏—Å—å–º–∞: {len(body)} —Å–∏–º–≤–æ–ª–æ–≤")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
                if send_telegram_message(subject, sender, body, email_id_str):
                    notifications_sent += 1
                    print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                else:
                    print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
                
                # –ü–æ–º–µ—á–∞–µ–º –ø–∏—Å—å–º–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
                mail.store(email_id, '+FLAGS', '\\Seen')
                print("üì≠ –ü–∏—Å—å–º–æ –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –ø–∏—Å—å–º–∞
                new_last_processed_id = email_id_str
            else:
                print("‚ùå –ü–∏—Å—å–º–æ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ –∫—Ä–∏—Ç–µ—Ä–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –±—ã–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –Ω–æ–≤—ã–µ –ø–∏—Å—å–º–∞
        if new_last_processed_id != last_processed_id:
            save_processed_state(new_last_processed_id)
        else:
            print("üíæ –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å")
        
        print(f"\n=== –†–ï–ó–£–õ–¨–¢–ê–¢ ===")
        print(f"üìä –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {notifications_sent}")
        print(f"üìÅ –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ID {new_last_processed_id}")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        mail.close()
        mail.logout()
        print("üîí –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ø–æ—á—Ç–æ–π –∑–∞–∫—Ä—ã—Ç–æ")
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        print(f"üîß –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:\n{traceback.format_exc()}")

if __name__ == '__main__':
    check_email()
    print("\nüéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
